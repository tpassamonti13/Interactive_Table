{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedTransform from './AnimatedTransform';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport StyleSheet from '../../../../exports/StyleSheet';\nvar flattenStyle = StyleSheet.flatten;\n\nvar AnimatedStyle = /*#__PURE__*/function (_AnimatedWithChildren) {\n  _inheritsLoose(AnimatedStyle, _AnimatedWithChildren);\n\n  function AnimatedStyle(style) {\n    var _this;\n\n    _this = _AnimatedWithChildren.call(this) || this;\n    style = flattenStyle(style) || {};\n\n    if (style.transform) {\n      style = _objectSpread(_objectSpread({}, style), {}, {\n        transform: new AnimatedTransform(style.transform)\n      });\n    }\n\n    _this._style = style;\n    return _this;\n  } // Recursively get values for nested styles (like iOS's shadowOffset)\n\n\n  var _proto = AnimatedStyle.prototype;\n\n  _proto._walkStyleAndGetValues = function _walkStyleAndGetValues(style) {\n    var updatedStyle = {};\n\n    for (var key in style) {\n      var value = style[key];\n\n      if (value instanceof AnimatedNode) {\n        if (!value.__isNative) {\n          // We cannot use value of natively driven nodes this way as the value we have access from\n          // JS may not be up to date.\n          updatedStyle[key] = value.__getValue();\n        }\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetValues(value);\n      } else {\n        updatedStyle[key] = value;\n      }\n    }\n\n    return updatedStyle;\n  };\n\n  _proto.__getValue = function __getValue() {\n    return this._walkStyleAndGetValues(this._style);\n  } // Recursively get animated values for nested styles (like iOS's shadowOffset)\n  ;\n\n  _proto._walkStyleAndGetAnimatedValues = function _walkStyleAndGetAnimatedValues(style) {\n    var updatedStyle = {};\n\n    for (var key in style) {\n      var value = style[key];\n\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getAnimatedValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n\n    return updatedStyle;\n  };\n\n  _proto.__getAnimatedValue = function __getAnimatedValue() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  };\n\n  _proto.__attach = function __attach() {\n    for (var key in this._style) {\n      var value = this._style[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__addChild(this);\n      }\n    }\n  };\n\n  _proto.__detach = function __detach() {\n    for (var key in this._style) {\n      var value = this._style[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__removeChild(this);\n      }\n    }\n\n    _AnimatedWithChildren.prototype.__detach.call(this);\n  };\n\n  _proto.__makeNative = function __makeNative() {\n    for (var key in this._style) {\n      var value = this._style[key];\n\n      if (value instanceof AnimatedNode) {\n        value.__makeNative();\n      }\n    }\n\n    _AnimatedWithChildren.prototype.__makeNative.call(this);\n  };\n\n  _proto.__getNativeConfig = function __getNativeConfig() {\n    var styleConfig = {};\n\n    for (var styleKey in this._style) {\n      if (this._style[styleKey] instanceof AnimatedNode) {\n        var style = this._style[styleKey];\n\n        style.__makeNative();\n\n        styleConfig[styleKey] = style.__getNativeTag();\n      } // Non-animated styles are set using `setNativeProps`, no need\n      // to pass those as a part of the node config\n\n    }\n\n    NativeAnimatedHelper.validateStyles(styleConfig);\n    return {\n      type: 'style',\n      style: styleConfig\n    };\n  };\n\n  return AnimatedStyle;\n}(AnimatedWithChildren);\n\nexport default AnimatedStyle;","map":null,"metadata":{},"sourceType":"module"}