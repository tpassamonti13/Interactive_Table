{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nimport * as React from 'react';\nimport { forwardRef } from 'react';\nimport Image from '../Image';\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\nvar emptyObject = {};\n/**\n * Very simple drop-in replacement for <Image> which supports nesting views.\n */\n\nvar ImageBackground = /*#__PURE__*/forwardRef(function (props, forwardedRef) {\n  var children = props.children,\n      _props$style = props.style,\n      style = _props$style === void 0 ? emptyObject : _props$style,\n      imageStyle = props.imageStyle,\n      imageRef = props.imageRef,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"style\", \"imageStyle\", \"imageRef\"]);\n\n  var _StyleSheet$flatten = StyleSheet.flatten(style),\n      height = _StyleSheet$flatten.height,\n      width = _StyleSheet$flatten.width;\n\n  return /*#__PURE__*/React.createElement(View, {\n    ref: forwardedRef,\n    style: style\n  }, /*#__PURE__*/React.createElement(Image, _extends({}, rest, {\n    ref: imageRef,\n    style: [{\n      // Temporary Workaround:\n      // Current (imperfect yet) implementation of <Image> overwrites width and height styles\n      // (which is not quite correct), and these styles conflict with explicitly set styles\n      // of <ImageBackground> and with our internal layout model here.\n      // So, we have to proxy/reapply these styles explicitly for actual <Image> component.\n      // This workaround should be removed after implementing proper support of\n      // intrinsic content size of the <Image>.\n      width: width,\n      height: height,\n      zIndex: -1\n    }, StyleSheet.absoluteFill, imageStyle]\n  })), children);\n});\nImageBackground.displayName = 'ImageBackground';\nexport default ImageBackground;","map":null,"metadata":{},"sourceType":"module"}